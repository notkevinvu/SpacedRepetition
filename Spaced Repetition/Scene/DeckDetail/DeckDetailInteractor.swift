//
//  DeckDetailInteractor.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/3/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DeckDetailBusinessLogic
{
    func getDeck(request: DeckDetail.ShowDeck.Request)
    
    func createCard(request: DeckDetail.CreateCard.Request)
    
    func showCreateCard(request: DeckDetail.ShowCreateCard.Request)
    
    func showCreateCardVC(request: DeckDetail.ShowCreateCard.Request)
}

protocol DeckDetailDataStore
{
    var deckInfo: Deck? { get set }
}

class DeckDetailInteractor: DeckDetailBusinessLogic, DeckDetailDataStore
{
    // MARK: Properties
    
    var presenter: DeckDetailPresentationLogic?
    var decksWorker = DecksWorker(decksStore: DecksMemStore())
    
    var deckInfo: Deck?
  
    // MARK: Do something
    
    func getDeck(request: DeckDetail.ShowDeck.Request) {
        guard let deckInfo = deckInfo else {
            assertionFailure("No deck info available")
            return
        }
        
        let response = DeckDetail.ShowDeck.Response(deck: deckInfo)
        presenter?.presentDeck(response: response)
    }
    
    func createCard(request: DeckDetail.CreateCard.Request) {
        let cardToCreate = Card(frontSide: request.frontSideText, backSide: request.backSideText)
        decksWorker.createCard(forDeckID: request.deckID, card: cardToCreate)
        
        let response = DeckDetail.CreateCard.Response(card: cardToCreate)
        presenter?.presentCard(response: response)
    }
    
    func showCreateCard(request: DeckDetail.ShowCreateCard.Request) {
        let response = DeckDetail.ShowCreateCard.Response()
        presenter?.presentCreateCard(response: response)
    }
    
    func showCreateCardVC(request: DeckDetail.ShowCreateCard.Request) {
        
        let frontTextField = AlertDisplayable.TextField { (textField) in
            textField.placeholder = "Front side of card"
        }
        let backTextField = AlertDisplayable.TextField { (textField) in
            textField.placeholder = "Back side of card"
        }
        let cancelAction = AlertDisplayable.Action(title: "Cancel", style: .cancel, handler: nil)
        let saveAction = AlertDisplayable.Action(title: "Done", style: .default) { _ in
            // TODO: add card and save card
        }
        
        let viewModel = AlertDisplayable.ViewModel(title: "New Card", message: "Please enter card details", textFields: [frontTextField, backTextField], actions: [cancelAction, saveAction])
        presenter?.presentAlert(viewModel: viewModel)
    }
    
}

extension DeckDetailInteractor: DeckDetailViewDelegate {
    
    func deckDetailViewSelectStudyDeck(request: DeckDetail.StudyDeck.Request) {
        print("tapped study deck button")
    }
    
}
