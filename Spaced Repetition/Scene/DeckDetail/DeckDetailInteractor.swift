//
//  DeckDetailInteractor.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/3/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DeckDetailBusinessLogic
{
    func getDeck(request: DeckDetail.ShowDeck.Request)
    
    func showExpandedCard(request: DeckDetail.ShowExpandedCard.Request)
    
//    func createCard(request: CDDeckDetail.CreateCard.Request)
    
    func showCreateCard(request: DeckDetail.ShowCreateCard.Request)
    
    func showCardOptionsAlert(request: DeckDetail.ShowCardOptions.Request)
    
    func reorderCards(request: DeckDetail.ReorderCards.Request)
}

protocol DeckDetailDataStore
{
    var deckInfo: Deck? { get set }
    
    var currentCardInfo: Card? { get set }
}

class DeckDetailInteractor: DeckDetailBusinessLogic, DeckDetailDataStore
{
    // MARK: Properties
    typealias Factory = DecksWorkerFactory
    var presenter: DeckDetailPresentationLogic?
    var decksWorker: DecksWorkerProtocol
    
    var deckInfo: Deck?
    var currentCardInfo: Card?
    
    // MARK: Initialization
    
    // pass in a factory, likely a dependency container that has an extension
    // that conforms to the DecksWorkerFactory protocol to make a decks worker
    init(factory: Factory) {
        self.decksWorker = factory.makeDecksWorker()
    }
    
    // we can edit cards directly here, rather than in the memory store
    var cardsFromDeck: [Card] = []
    
    
    // MARK: Get deck on scene init
    func getDeck(request: DeckDetail.ShowDeck.Request) {
        guard let deckInfo = deckInfo else {
            assertionFailure("Failed to get deck info \(#line) \(#file)")
            return
        }
        
        cardsFromDeck = deckInfo.cards.array as! [Card]
        
        let response = DeckDetail.ShowDeck.Response(deck: deckInfo)
        presenter?.presentDeck(response: response)
    }
    
    
    // MARK: Show Expanded Card
    func showExpandedCard(request: DeckDetail.ShowExpandedCard.Request) {
        let cardInfoToPass = cardsFromDeck[request.indexOfCardToShow]
        
        let response = DeckDetail.ShowExpandedCard.Response(cardToShow: cardInfoToPass)
        presenter?.presentExpandedCard(response: response)
    }
    
    
    // MARK: Show Create Card Alert
    func showCreateCard(request: DeckDetail.ShowCreateCard.Request) {
        let frontTextFieldPlaceholder = AlertDisplayable.TextField(placeholder: "Front side of card")
        let backTextFieldPlaceholder = AlertDisplayable.TextField(placeholder: "Back side of card")
        
        let cancelAction = AlertDisplayable.Action(title: "Cancel", style: .cancel, handler: nil)
        
        let saveAction = AlertDisplayable.Action(title: "Done", style: .default) { [weak self] (action, ac) in
            guard
                let self = self,
                let deckToAddCardTo = self.deckInfo,
                let frontSideText = ac.textFields?[0].text,
                !frontSideText.isEmpty,
                let backSideText = ac.textFields?[1].text, !backSideText.isEmpty
                else {
                    return
            }
            
            let cardModel = CardModel(frontSideText: frontSideText, backSideText: backSideText, cardID: UUID(), dateCreated: Date())
            
            self.decksWorker.createCard(withCardModel: cardModel, forDeck: deckToAddCardTo)
            
            let response = DeckDetail.CreateCard.Response(cardModel: cardModel)
            self.presenter?.presentCard(response: response)
        }
        
        let viewModel = AlertDisplayable.ViewModel(title: "New Card", message: "Please enter card details", textFields: [frontTextFieldPlaceholder, backTextFieldPlaceholder], actions: [cancelAction, saveAction])
        presenter?.presentAlert(viewModel: viewModel, alertStyle: .alert)
        
    }
    
    
    // MARK: - Show Card Options Alert
    func showCardOptionsAlert(request: DeckDetail.ShowCardOptions.Request) {
        let indexOfCardToEditOrDelete = request.cardIndexToEditOrDelete
        print(indexOfCardToEditOrDelete, cardsFromDeck.count)
        let cardToEditOrDelete = cardsFromDeck[indexOfCardToEditOrDelete]
        
        let cancelAction = AlertDisplayable.Action(title: "Cancel", style: .cancel, handler: nil)
        
        // MARK: - Edit Card
        let editCardAction = AlertDisplayable.Action(title: "Edit Card", style: .default) { [weak self] (action1, ac1) in
            guard let self = self else { return }
            
            let cardFrontSideTextFieldPlaceholder = AlertDisplayable.TextField(placeholder: "Front side of card")
            let cardBackSideTextFieldPlaceholder = AlertDisplayable.TextField(placeholder: "Back side of card")
            
            let cancelEditCardAction = AlertDisplayable.Action(title: "Cancel", style: .cancel, handler: nil)
            
            let saveEditedCardAction = AlertDisplayable.Action(title: "Done", style: .default) { (action2, ac2) in
                
                guard
                    let newCardFrontSideText = ac2.textFields?[0].text,
                    !newCardFrontSideText.isEmpty,
                    let newCardBackSideText = ac2.textFields?[1].text,
                    !newCardBackSideText.isEmpty
                    else {
                        return
                }
                
                self.decksWorker.editCard(cardToEdit: cardToEditOrDelete, newFrontText: newCardFrontSideText, newBackText: newCardBackSideText)
                
                let response = DeckDetail.ShowEditCardAC.Response(card: cardToEditOrDelete, cardIndex: indexOfCardToEditOrDelete)
                self.presenter?.presentEditedCard(response: response)
            }
            
            let editCardViewModel = AlertDisplayable.ViewModel(title: "Edit Card", message: "Please enter new card details", textFields: [cardFrontSideTextFieldPlaceholder, cardBackSideTextFieldPlaceholder], actions: [cancelEditCardAction, saveEditedCardAction])
            self.presenter?.presentAlert(viewModel: editCardViewModel, alertStyle: .alert)
        }
        
        // MARK: - Delete Card
        let deleteCardAction = AlertDisplayable.Action(title: "Delete card", style: .destructive) { [weak self] (action1, ac1) in
            
            guard
                let self = self,
                let deck = self.deckInfo
                else {
                    return
            }
            
            let cancelDeleteCardAction = AlertDisplayable.Action(title: "Cancel", style: .cancel, handler: nil)
            
            let saveDeleteCardAction = AlertDisplayable.Action(title: "Confirm", style: .destructive) { (action2, ac2) in
                
                self.decksWorker.deleteCard(card: cardToEditOrDelete, fromDeck: deck)
                
                self.cardsFromDeck.remove(at: indexOfCardToEditOrDelete)
                
                let response = DeckDetail.ShowDeleteCardAC.Response(cardIndexToDelete: indexOfCardToEditOrDelete)
                self.presenter?.presentDeletedCard(response: response)
            }
            
            let deleteActionViewModel = AlertDisplayable.ViewModel(title: "Confirm delete", message: "Are you sure you want to delete this card?", textFields: [], actions: [cancelDeleteCardAction, saveDeleteCardAction])
            self.presenter?.presentAlert(viewModel: deleteActionViewModel, alertStyle: .alert)
        }
        
        let actionSheetViewModel = AlertDisplayable.ViewModel(title: nil, message: nil, textFields: [], actions: [cancelAction, editCardAction, deleteCardAction])
        presenter?.presentAlert(viewModel: actionSheetViewModel, alertStyle: .actionSheet)
    }
    
    // MARK: Reorder cards
    func reorderCards(request: DeckDetail.ReorderCards.Request) {
        guard let deckInfo = deckInfo else { return }
        
        let cardToMove = cardsFromDeck.remove(at: request.sourceIndex)
        cardsFromDeck.insert(cardToMove, at: request.destinationIndex)
        
        deckInfo.reorder(card: cardToMove, sourceIndex: request.sourceIndex, destinationIndex: request.destinationIndex)
    }
    
    
}

// MARK: - Delegate methods
extension DeckDetailInteractor: DeckDetailViewDelegate {
    
    func deckDetailViewSelectReviewDeck(request: DeckDetail.ShowReviewDeck.Request) {
        guard let deckInfoToPass = deckInfo else { return }
        
        let response = DeckDetail.ShowReviewDeck.Response(deckInfoToPass: deckInfoToPass)
        presenter?.presentReviewDeck(response: response)
    }
    
}
