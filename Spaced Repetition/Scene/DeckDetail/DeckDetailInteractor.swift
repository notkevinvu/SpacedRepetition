//
//  DeckDetailInteractor.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/3/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DeckDetailBusinessLogic
{
    func getDeck(request: DeckDetail.ShowDeck.Request)
    
    func createCard(request: DeckDetail.CreateCard.Request)
}

protocol DeckDetailDataStore
{
    var deckInfo: Deck? { get set }
}

class DeckDetailInteractor: DeckDetailBusinessLogic, DeckDetailDataStore
{
    var presenter: DeckDetailPresentationLogic?
    var worker: DeckDetailWorker?
    
    var deckInfo: Deck?
  
    // MARK: Do something
    
    func getDeck(request: DeckDetail.ShowDeck.Request) {
        guard let deckInfo = deckInfo else {
            /*
             TODO: implement assertionFailure() when the createDeck use case
             has been modified to pass a new deck object as the
             deckInfoToPass property
             
             For now, we just print the "No deck info available" message
             since the add deck button doesn't correctly pass a new deck as the
             deckInfoToPass
             */
//            assertionFailure("No deck info available")
            print("No deck info available")
            return
        }
        
        let response = DeckDetail.ShowDeck.Response(deck: deckInfo)
        presenter?.presentDeck(response: response)
    }
    
    func createCard(request: DeckDetail.CreateCard.Request) {
        
    }
    
}
