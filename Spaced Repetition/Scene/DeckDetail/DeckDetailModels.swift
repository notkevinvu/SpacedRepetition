//
//  DeckDetailModels.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/3/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum DeckDetail
{
    // MARK: Use cases
    
    enum ShowDeck {
        struct Request {
            
        }
        struct Response {
            let deck: Deck
        }
        enum ViewModel {
            struct DeckInfoModel {
                let displayedDeckName: String
                let displayedDeckID: UUID
            }
            struct DeckCardModels {
                let displayedCards: [DeckDetailCollectionViewCell.CardCellModel]
            }
        }
        
    }
    
    // used to show/present the alert controller to prompt users to enter the card they want
    enum ShowCreateCard {
        struct Request {
            let displayedDeckID: UUID
        }
        struct Response {
            
        }
        struct ViewModel {
            
        }
    }
    
    
    enum CreateCard {
        struct Request {
            let deckID: UUID
            let frontSideText: String
            let backSideText: String
        }
        struct Response {
            let card: Card
        }
        struct ViewModel {
            let displayedCard: DeckDetailCollectionViewCell.CardCellModel
        }
    }
    
    enum ShowEditTitleAlert {
        struct Request {
            let deckID: UUID
        }
        
        struct Response {
            let newDeckTitle: String
        }
        
        struct ViewModel {
            let newDeckTitle: String
        }
    }
    
    
    enum StudyDeck {
        struct Request {
            
        }
        struct Response {
            
        }
        struct ViewModel {
            
        }
    }
}

public enum AlertDisplayable {
    public struct ViewModel {
        let title: String?
        let message: String?
        let textFields: [TextField]
        let actions: [Action]
        
        public init(title: String?, message: String, textFields: [TextField], actions: [Action]) {
            self.title = title
            self.message = message
            self.textFields = textFields
            self.actions = actions
        }
    }
    
    public struct Action {
        let title: String?
        let style: UIAlertAction.Style
        let handler: ((UIAlertAction, UIAlertController) -> Void)?
        
        public init(title: String?, style: UIAlertAction.Style, handler: ((UIAlertAction, UIAlertController) -> Void)?) {
            self.title = title
            self.style = style
            self.handler = handler
        }
    }
    
    public struct TextField {
//        let textFieldConfig: ((UITextField) -> Void)?
        let placeholder: String
    }
}
