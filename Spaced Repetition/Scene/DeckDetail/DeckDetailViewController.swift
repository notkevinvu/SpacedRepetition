//
//  DeckDetailViewController.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/3/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DeckDetailDisplayLogic: class
{
    func displayDeckName(viewModel: DeckDetail.ShowDeck.ViewModel.DeckNameModel)
    func displayDeckCards(viewModel: DeckDetail.ShowDeck.ViewModel.DeckCardModels)
    
    func displayCreateCard(viewModel: DeckDetail.ShowCreateCard.ViewModel)
}

class DeckDetailViewController: UIViewController, DeckDetailDisplayLogic
{
    
    // MARK: Properties
    
    var interactor: DeckDetailBusinessLogic?
    var router: (NSObjectProtocol & DeckDetailRoutingLogic & DeckDetailDataPassing)?
    var contentView: DeckDetailView!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup()
    {
        let viewController = self
        let interactor = DeckDetailInteractor()
        let presenter = DeckDetailPresenter()
        let router = DeckDetailRouter()
        let view = DeckDetailView()
        
        viewController.interactor = interactor
        viewController.router = router
        viewController.contentView = view
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        view.delegate = interactor
    }
    
    private func configureNavBar() {
        navigationItem.largeTitleDisplayMode = .automatic
        let plusImage = UIImage(systemName: "plus.rectangle")
        let addCardBarButton = UIBarButtonItem(image: plusImage, style: .done, target: self, action: #selector(handleAddCardButton))
        navigationItem.rightBarButtonItem = addCardBarButton
        navigationItem.title = "Untitled Deck"
    }
    
    private func configureCollectionDataSource() {
        contentView.collectionView.delegate = self
        contentView.collectionView.dataSource = self
    }
  
  // MARK: Routing
  
    
    
  // MARK: View lifecycle
    
    override func loadView() {
        super.loadView()
        view = contentView
    }
      
    override func viewDidLoad()
    {
        super.viewDidLoad()
        configureCollectionDataSource()
        configureNavBar()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        getDeck()
    }
    
    // MARK: Get Deck
    
    func getDeck() {
        let request = DeckDetail.ShowDeck.Request()
        interactor?.getDeck(request: request)
    }

    // MARK: Display Logic
    
    func displayDeckName(viewModel: DeckDetail.ShowDeck.ViewModel.DeckNameModel) {
        navigationItem.title = viewModel.displayedDeckName
    }
    
    var displayedDeckCards: [DeckDetailCollectionViewCell.CardCellModel]?
    
    func displayDeckCards(viewModel: DeckDetail.ShowDeck.ViewModel.DeckCardModels) {
        displayedDeckCards = viewModel.displayedCards
        contentView.collectionView.reloadData()
    }
    
    func displayCreateCard(viewModel: DeckDetail.ShowCreateCard.ViewModel) {
        let acTitle = viewModel.acTitle
        let ac = UIAlertController(title: acTitle, message: nil, preferredStyle: .alert)
        ac.addTextField { (frontCardText) in
            frontCardText.placeholder = "Front of card"
        }
        ac.addTextField { (backCardText) in
            backCardText.placeholder = "Back of card"
        }
        ac.addAction(UIAlertAction(title: "Cancel", style: .cancel))
        ac.addAction(UIAlertAction(title: "Done", style: .default, handler: { [weak self] _ in
            guard let self = self else { return }
            guard let frontText = ac.textFields?[0].text else { return }
            guard let backText = ac.textFields?[1].text else { return }
            self.createCard(frontText: frontText, backText: backText)
        }))
        present(ac, animated: true)
    }
    
    // MARK: Button methods
    
    func createCard(frontText: String, backText: String) {
        print("Front text: \(frontText) \nBack text: \(backText)")
    }
    
    @objc func handleAddCardButton() {
        let request = DeckDetail.ShowCreateCard.Request()
        interactor?.showCreateCard(request: request)
    }

}

// MARK: - Collection view methods

extension DeckDetailViewController: UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        guard let displayedDeckCards = displayedDeckCards else { return 0 }
        return displayedDeckCards.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DeckDetailCollectionViewCell.identifier, for: indexPath) as! DeckDetailCollectionViewCell
        
        guard let displayedDeckCards = displayedDeckCards else { return cell }
        cell.configureWithModel(displayedDeckCards[indexPath.row])
        
        return cell
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print("Tapped collection view cell: \(indexPath.row)")
    }
    
}
