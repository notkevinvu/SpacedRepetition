//
//  DeckDetailViewController.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/3/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: Display Logic protocol
protocol DeckDetailDisplayLogic: class
{
    func displayDeckName(viewModel: DeckDetail.ShowDeck.ViewModel.DeckInfoModel)
    func displayDeckCards(viewModel: DeckDetail.ShowDeck.ViewModel.DeckCardModels)
    
    func displayCreatedCard(viewModel: DeckDetail.CreateCard.ViewModel)
    func displayEditedCard(viewModel: DeckDetail.ShowEditCardAC.ViewModel)
    func displayDeletedCard(viewModel: DeckDetail.ShowDeleteCardAC.ViewModel)
    
    func displayReviewDeck(deckModel: DeckDetail.ShowReviewDeck.DeckModel)
    func displayExpandedCard(cardModel: DeckDetail.ShowExpandedCard.CardModel)
}


// MARK: - DeckDetailVC
class DeckDetailViewController: UIViewController, DeckDetailDisplayLogic, AlertDisplayableViewController
{
    
    // MARK: Properties
    
    var interactor: DeckDetailBusinessLogic?
    var router: (NSObjectProtocol & DeckDetailRoutingLogic & DeckDetailDataPassing)?
    var contentView: DeckDetailView!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DeckDetailInteractor(factory: DependencyContainer())
        let presenter = DeckDetailPresenter()
        let router = DeckDetailRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        
        interactor.presenter = presenter
        presenter.viewController = viewController
        presenter.alertDisplayableViewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    func setupView() {
        let contentView = DeckDetailView(view: view)
        self.contentView = contentView
        contentView.delegate = interactor as? DeckDetailView.Delegate
    }
    
    private func configureNavBar() {
        navigationItem.largeTitleDisplayMode = .automatic
        navigationItem.title = "Untitled Deck"
        
        let plusImage = UIImage(systemName: "plus.rectangle")
        
        let addCardBarButton = UIBarButtonItem(image: plusImage, style: .done, target: self, action: #selector(handleAddCardButton))
        
        navigationItem.rightBarButtonItems = [addCardBarButton]
        
        // TODO: to be used for converting the title view into a tappable view for
        // editing deck title?
//        navigationItem.titleView?.addGestureRecognizer(navBarTitleTapRecognizer)
//        navigationItem.titleView?.layer.borderWidth = 1.0
//        navigationItem.titleView?.layer.borderColor = UIColor.black.cgColor
    }
    
    
    private func configureCollectionDataSource() {
        contentView.collectionView.delegate = self
        contentView.collectionView.dataSource = self
        contentView.collectionView.dragDelegate = self
        contentView.collectionView.dropDelegate = self
    }
  
    // MARK: Routing/Navigation
    
    func displayReviewDeck(deckModel: DeckDetail.ShowReviewDeck.DeckModel) {
        router?.dataStore?.deckInfo = deckModel.deckInfoToPass
        router?.routeToReviewDeck()
    }
    
    func displayExpandedCard(cardModel: DeckDetail.ShowExpandedCard.CardModel) {
        router?.dataStore?.currentCardInfo = cardModel.cardToShow
        router?.routeToExpandedCardDetail()
    }
    
    
    // MARK: View lifecycle
    
    override func loadView() {
        super.loadView()
        setupView()
        view = contentView
    }
      
    override func viewDidLoad()
    {
        super.viewDidLoad()
        configureCollectionDataSource()
        configureNavBar()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        getCDDeck()
    }
    
    // MARK: Get Deck from data store
    
    func getCDDeck() {
        let request = DeckDetail.ShowDeck.Request()
        interactor?.getDeck(request: request)
    }

    // MARK: Display Logic
    
    func displayDeckName(viewModel: DeckDetail.ShowDeck.ViewModel.DeckInfoModel) {
        navigationItem.title = viewModel.displayedDeckName
    }
    
    var displayedDeckCards: [DeckDetailCollectionViewCell.CardCellModel] = []
    
    func displayDeckCards(viewModel: DeckDetail.ShowDeck.ViewModel.DeckCardModels) {
        displayedDeckCards = viewModel.displayedCards
        contentView.collectionView.reloadData()
    }
    
    func displayCreatedCard(viewModel: DeckDetail.CreateCard.ViewModel) {
        displayedDeckCards.append(viewModel.displayedCard)
        contentView.collectionView.reloadData()
    }
    
    func displayEditedCard(viewModel: DeckDetail.ShowEditCardAC.ViewModel) {
        // replacing the card model at the given index with the new card model
        // specified by the user
        displayedDeckCards[viewModel.cardIndex] = viewModel.displayedCard
        contentView.collectionView.reloadData()
    }
    
    func displayDeletedCard(viewModel: DeckDetail.ShowDeleteCardAC.ViewModel) {
        displayedDeckCards.remove(at: viewModel.cardIndexToDelete)
        contentView.collectionView.reloadData()
    }
    
    // MARK: Button methods
    
    @objc func handleAddCardButton() {
        let request = DeckDetail.ShowCreateCard.Request()
        interactor?.showCreateCard(request: request)
    }
    
    // MARK: Helper methods
    
    fileprivate func reorderItems(coordinator: UICollectionViewDropCoordinator, destinationIndexPath: IndexPath, collectionView: UICollectionView) {
        
        guard
            let item = coordinator.items.first,
            let sourceIndexpath = item.sourceIndexPath
            else {
                return
        }
        
        // batch update allows us to remove and insert as a group (so we don't
        // have to check if the destination index is a valid index
        collectionView.performBatchUpdates({
            let cardModelToMove = displayedDeckCards.remove(at: sourceIndexpath.item)
            displayedDeckCards.insert(cardModelToMove, at: destinationIndexPath.item)
            collectionView.reloadData()
            
            collectionView.deleteItems(at: [sourceIndexpath])
            collectionView.insertItems(at: [destinationIndexPath])
            
        }, completion: nil)
        
        coordinator.drop(item.dragItem, toItemAt: destinationIndexPath)
        
        let request = DeckDetail.ReorderCards.Request(sourceIndex: sourceIndexpath.item, destinationIndex: destinationIndexPath.item)
        interactor?.reorderCards(request: request)
    }
    
}

// MARK: - Collection view methods

extension DeckDetailViewController: UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedDeckCards.count
    }
    

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DeckDetailCollectionViewCell.identifier, for: indexPath) as! DeckDetailCollectionViewCell
        cell.configureWithModel(displayedDeckCards[indexPath.row])
        
        let cardIndexToEditOrDelete = indexPath.row
        
        cell.didTapOptionsButton = { [weak self] in
            guard let self = self else { return }
            
            let request = DeckDetail.ShowCardOptions.Request(cardIndexToEditOrDelete: cardIndexToEditOrDelete)
            self.interactor?.showCardOptionsAlert(request: request)
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        // TODO: present expanded card view with scrollable text views so user can
        // see more text if needed
        
        let request = DeckDetail.ShowExpandedCard.Request(indexOfCardToShow: indexPath.row)
        interactor?.showExpandedCard(request: request)
    }
    
}


// MARK: Drag/drop collection view ext
extension DeckDetailViewController: UICollectionViewDragDelegate, UICollectionViewDropDelegate {
    
    func collectionView(_ collectionView: UICollectionView, dropSessionDidUpdate session: UIDropSession, withDestinationIndexPath destinationIndexPath: IndexPath?) -> UICollectionViewDropProposal {
        
        if collectionView.hasActiveDrag {
            return UICollectionViewDropProposal(operation: .move, intent: .insertAtDestinationIndexPath)
        }
        
        return UICollectionViewDropProposal(operation: .forbidden)
    }
    
    func collectionView(_ collectionView: UICollectionView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath) -> [UIDragItem] {
        
        let item = displayedDeckCards[indexPath.row]
        
        let itemProvider = NSItemProvider(object: item.frontSide as NSString)
        let dragItem = UIDragItem(itemProvider: itemProvider)
        dragItem.localObject = item
        
        return [dragItem]
    }
    
    
    func collectionView(_ collectionView: UICollectionView, performDropWith coordinator: UICollectionViewDropCoordinator) {
        
        guard let destinationIndexPath = coordinator.destinationIndexPath else { return }
        
        if coordinator.proposal.operation == .move {
            reorderItems(coordinator: coordinator, destinationIndexPath: destinationIndexPath, collectionView: collectionView)
        }
        
    }
    
}
