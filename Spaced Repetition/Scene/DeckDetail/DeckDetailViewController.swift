//
//  DeckDetailViewController.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/3/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: Display Logic protocol
protocol DeckDetailDisplayLogic: class
{
    func displayDeckName(viewModel: DeckDetail.ShowDeck.ViewModel.DeckInfoModel)
    func displayDeckCards(viewModel: DeckDetail.ShowDeck.ViewModel.DeckCardModels)
    
    func displayCreatedCard(viewModel: DeckDetail.CreateCard.ViewModel)
    func displayEditedCard(viewModel: DeckDetail.ShowEditCardAC.ViewModel)
    func displayDeletedCard(viewModel: DeckDetail.ShowDeleteCardAC.ViewModel)
    
    func displayEditedDeckTitle(viewModel: DeckDetail.ShowEditTitleAlert.ViewModel)
}


// MARK: - DeckDetailVC
class DeckDetailViewController: UIViewController, DeckDetailDisplayLogic, AlertDisplayableViewController
{
    
    // MARK: Properties
    
    var interactor: DeckDetailBusinessLogic?
    var router: (NSObjectProtocol & DeckDetailRoutingLogic & DeckDetailDataPassing)?
    var contentView: DeckDetailView!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup()
    {
        let viewController = self
        let interactor = DeckDetailInteractor(factory: DependencyContainer())
        let presenter = DeckDetailPresenter()
        let router = DeckDetailRouter()
        let view = DeckDetailView()
        
        viewController.interactor = interactor
        viewController.router = router
        viewController.contentView = view
        interactor.presenter = presenter
        presenter.viewController = viewController
        presenter.alertDisplayableViewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        view.delegate = interactor
    }
    
    private func configureNavBar() {
        navigationItem.largeTitleDisplayMode = .automatic
        // replace title with a barbuttonitem to edit deck name
        navigationItem.title = "Untitled Deck"
        
        
        let plusImage = UIImage(systemName: "plus.rectangle")
        let addCardBarButton = UIBarButtonItem(image: plusImage, style: .done, target: self, action: #selector(handleAddCardButton))
        let editDeckTitleButton = UIBarButtonItem(title: "Edit title", style: .done, target: self, action: #selector(didTapEditTitleButton))
        let deleteDeckButton = UIBarButtonItem(title: "Delete", style: .done, target: self, action: #selector(didTapDeleteDeckButton))
        
        navigationItem.rightBarButtonItems = [addCardBarButton, editDeckTitleButton, deleteDeckButton]
        
        // TODO: to be used for converting the title view into a tappable view for
        // editing deck title?
//        navigationItem.titleView?.addGestureRecognizer(navBarTitleTapRecognizer)
//        navigationItem.titleView?.layer.borderWidth = 1.0
//        navigationItem.titleView?.layer.borderColor = UIColor.black.cgColor
    }
    
    
    private func configureCollectionDataSource() {
        contentView.collectionView.delegate = self
        contentView.collectionView.dataSource = self
    }
  
  // MARK: Routing
  
    
    
  // MARK: View lifecycle
    
    override func loadView() {
        super.loadView()
        view = contentView
    }
      
    override func viewDidLoad()
    {
        super.viewDidLoad()
        configureCollectionDataSource()
        configureNavBar()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        getDeck()
    }
    
    // MARK: Get Deck
    
    func getDeck() {
        let request = DeckDetail.ShowDeck.Request()
        interactor?.getDeck(request: request)
    }

    // MARK: Display Logic
    
    // should viewcontroller hold deckID like this?
    // could use name to filter when creating a card but has issue if user has
    // multiple decks with the same deck name
    var displayedDeckID: UUID?
    
    func displayDeckName(viewModel: DeckDetail.ShowDeck.ViewModel.DeckInfoModel) {
        navigationItem.title = viewModel.displayedDeckName
        displayedDeckID = viewModel.displayedDeckID
    }
    
    var displayedDeckCards: [DeckDetailCollectionViewCell.CardCellModel]?
    
    func displayDeckCards(viewModel: DeckDetail.ShowDeck.ViewModel.DeckCardModels) {
        displayedDeckCards = viewModel.displayedCards
        contentView.collectionView.reloadData()
    }
    
    func displayCreatedCard(viewModel: DeckDetail.CreateCard.ViewModel) {
        displayedDeckCards?.append(viewModel.displayedCard)
        contentView.collectionView.reloadData()
    }
    
    func displayEditedCard(viewModel: DeckDetail.ShowEditCardAC.ViewModel) {
        // replacing the card model at the given index with the new card model
        // specified by the user
        displayedDeckCards?[viewModel.cardID] = viewModel.displayedCard
        contentView.collectionView.reloadData()
    }
    
    
    func displayDeletedCard(viewModel: DeckDetail.ShowDeleteCardAC.ViewModel) {
        displayedDeckCards?.remove(at: viewModel.cardIndexToRemove)
        contentView.collectionView.reloadData()
    }
    
    
    func displayEditedDeckTitle(viewModel: DeckDetail.ShowEditTitleAlert.ViewModel) {
        navigationItem.title = viewModel.newDeckTitle
    }
    
    // MARK: Button methods
    
    @objc func handleAddCardButton() {
        guard let displayedDeckID = displayedDeckID else { return }
        let request = DeckDetail.ShowCreateCard.Request(displayedDeckID: displayedDeckID)
        
        interactor?.showCreateCard(request: request)
    }
    
    @objc func didTapEditTitleButton() {
        guard let displayedDeckID = displayedDeckID else { return }
        let request = DeckDetail.ShowEditTitleAlert.Request(deckID: displayedDeckID)
        interactor?.showEditTitleAlert(request: request)
    }
    
    @objc func didTapDeleteDeckButton() {
        guard let displayedDeckID = displayedDeckID else { return }
        let request = DeckDetail.ShowDeleteDeckAC.Request(displayedDeckID: displayedDeckID)
        interactor?.showDeleteDeckAlert(request: request)
    }

}

// MARK: - Collection view methods

extension DeckDetailViewController: UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        guard let displayedDeckCards = displayedDeckCards else { return 0 }
        return displayedDeckCards.count
    }
    

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DeckDetailCollectionViewCell.identifier, for: indexPath) as! DeckDetailCollectionViewCell
        
        guard let displayedDeckCards = displayedDeckCards else { return cell }
        cell.configureWithModel(displayedDeckCards[indexPath.row])
        
        guard let displayedDeckID = displayedDeckID else { return cell }
        
        let cardIndexToEditOrDelete = indexPath.row
        
        cell.didTapEditButton = { [weak self] in
            guard let self = self else { return }
            let request = DeckDetail.ShowEditCardAC.Request(deckID: displayedDeckID, cardID: cardIndexToEditOrDelete)
            self.interactor?.showEditCard(request: request)
            cell.toggleEditViews()
        }
        
        cell.didTapDeleteButton = { [weak self] in
            guard let self = self else { return }
            let request = DeckDetail.ShowDeleteCardAC.Request(deckID: displayedDeckID, cardID: cardIndexToEditOrDelete)
            self.interactor?.showDeleteCardAC(request: request)
            cell.toggleEditViews()
        }
        
        return cell
    }
    
}

