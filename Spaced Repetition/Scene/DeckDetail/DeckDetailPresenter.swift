//
//  DeckDetailPresenter.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/3/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DeckDetailPresentationLogic: AlertDisplayablePresenter
{
    func presentDeck(response: DeckDetail.ShowDeck.Response)
    
    func presentCard(response: DeckDetail.CreateCard.Response)
    
    func presentEditedCard(response: DeckDetail.ShowEditCardAC.Response)
    
    func presentDeletedCard(response: DeckDetail.ShowDeleteCardAC.Response)
}


class DeckDetailPresenter: DeckDetailPresentationLogic
{
    
    // MARK: Properties
    
    weak var viewController: DeckDetailDisplayLogic?
    weak var alertDisplayableViewController: AlertDisplayableViewController?
    
    
    // MARK: Present Deck
    func presentDeck(response: DeckDetail.ShowDeck.Response) {
        let deck = response.deck
        
        // name formatting for viewmodel
        let nameOfDeck = deck.name
        let deckNameModel = DeckDetail.ShowDeck.ViewModel.DeckInfoModel(displayedDeckName: nameOfDeck, displayedDeckID: deck.deckID)
        
        viewController?.displayDeckName(viewModel: deckNameModel)
        
        // card formatting for viewmodel
        var cards: [DeckDetailCollectionViewCell.CardCellModel] = []
        
        let cardsFromDeckArray = deck.cards.array as! [Card]
        
        for card in cardsFromDeckArray {
            let cellModel = DeckDetailCollectionViewCell.CardCellModel(frontSide: card.frontSideText, backSide: card.backSideText)
            cards.append(cellModel)
        }
        
        let cardViewModel = DeckDetail.ShowDeck.ViewModel.DeckCardModels(displayedCards: cards)
        
        viewController?.displayDeckCards(viewModel: cardViewModel)
    }
    
    
    // MARK: Present new card
    func presentCard(response: DeckDetail.CreateCard.Response) {
        let cardCellModel = DeckDetailCollectionViewCell.CardCellModel(frontSide: response.cardModel.frontSideText, backSide: response.cardModel.backSideText)
        
        let cardViewModel = DeckDetail.CreateCard.ViewModel(displayedCard: cardCellModel)
        viewController?.displayCreatedCard(viewModel: cardViewModel)
    }
    
    
    // MARK: Present edited card
    func presentEditedCard(response: DeckDetail.ShowEditCardAC.Response) {
        let updatedCardModel = DeckDetailCollectionViewCell.CardCellModel(frontSide: response.card.frontSideText, backSide: response.card.backSideText)
        let cardIndex = response.cardIndex
        
        let viewModel = DeckDetail.ShowEditCardAC.ViewModel(displayedCard: updatedCardModel, cardIndex: cardIndex)
        viewController?.displayEditedCard(viewModel: viewModel)
    }
    
    
    // MARK: Present deleted card (aka update)
    func presentDeletedCard(response: DeckDetail.ShowDeleteCardAC.Response) {
        let cardIndexToDelete = response.cardIndexToDelete
        
        let viewModel = DeckDetail.ShowDeleteCardAC.ViewModel(cardIndexToDelete: cardIndexToDelete)
        viewController?.displayDeletedCard(viewModel: viewModel)
    }
    
    
}
