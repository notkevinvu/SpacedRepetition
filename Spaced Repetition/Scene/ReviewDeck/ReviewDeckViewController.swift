//
//  StudyDeckViewController.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 4/24/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ReviewDeckDisplayLogic: class
{
    
}

class ReviewDeckViewController: UIViewController, ReviewDeckDisplayLogic
{
    var interactor: ReviewDeckBusinessLogic?
    var router: (NSObjectProtocol & ReviewDeckRoutingLogic & ReviewDeckDataPassing)?
    var contentView: ReviewDeckView!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup()
    {
        let viewController = self
        let interactor = ReviewDeckInteractor()
        let presenter = ReviewDeckPresenter()
        let router = ReviewDeckRouter()
        let view = ReviewDeckView()
        
        viewController.interactor = interactor
        viewController.router = router
        viewController.contentView = view
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        view.delegate = interactor
    }
  
    // MARK: Routing
  
    
  
    // MARK: View lifecycle
    
    override func loadView() {
        view = contentView
    }
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupNavigationBar()
        
    }
    
    
    private func setupNavigationBar() {
        navigationItem.hidesBackButton = true
        
        /*
         TODO: Eventually, it is preferable to change this button such that it
         uses a custom image/button (button should have its own image ofc) -
         (refer to the line above the current done bar button item that
         specifies a customView)
         */
//        navigationItem.rightBarButtonItem = UIBarButtonItem(customView: ourCustomView)
        navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Done", style: .done, target: self, action: #selector(didTapDoneButton))
        
        navigationItem.title = "US Capitals"
        navigationItem.largeTitleDisplayMode = .always
    }
    
    
    // MARK: Button methods
    
    /*
     TODO: Add method that will check which cards (if any) have not been reviewed
     in this session
     
     We currently have an enum within the Card subclass `ReviewStatus` that has
     cases corresponding to their priority (or rather, the 'schedule' that the user
     should be reviewing the cards with)
     
     When a card shows up on screen, the user will answer (to themselves) and
     mark themselves as right or wrong
     
     If they mark themselves as right, the card receives an updated reviewstatus flag,
     which is one above them (e.g. if we get an everyDay status card right, we move
     it to everyTwoDays [which is 2 days from that session] - however, if we get a onceAWeek
     card wrong, we move it all the way back to everyDay)
     */
    @objc func didTapDoneButton() {
        print("tapped done button")
        navigationController?.popViewController(animated: true)
    }
  
    
}
