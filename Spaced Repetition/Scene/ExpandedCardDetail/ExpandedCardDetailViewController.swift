//
//  ExpandedCardDetailViewController.swift
//  Spaced Repetition
//
//  Created by Kevin Vu on 7/20/20.
//  Copyright (c) 2020 An Nguyen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExpandedCardDetailDisplayLogic: class {
    func dismissVC(viewModel: ExpandedCardDetail.DismissVC.ViewModel)
}

class ExpandedCardDetailViewController: UIViewController, ExpandedCardDetailDisplayLogic {
    
    var interactor: ExpandedCardDetailBusinessLogic?
    var router: (NSObjectProtocol & ExpandedCardDetailRoutingLogic & ExpandedCardDetailDataPassing)?
    var contentView: ExpandedCardDetailView!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
  // MARK: Setup
  
    private func setup()
    {
        let viewController = self
        let view = ExpandedCardDetailView()
        let interactor = ExpandedCardDetailInteractor()
        let presenter = ExpandedCardDetailPresenter()
        let router = ExpandedCardDetailRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        viewController.contentView = view
        view.delegate = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing


    // MARK: View lifecycle
    
    override func loadView() {
        super.loadView()
        view = contentView
    }
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    
    // MARK: Display logic
    
    func dismissVC(viewModel: ExpandedCardDetail.DismissVC.ViewModel) {
        self.dismiss(animated: true, completion: nil)
    }
    
}
